#---
#swagger: "2.0"
#info:
#  description: "This is a sample server Petstore server.  You can find out more about\
#    \ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\
#    \  For this sample, you can use the api key `special-key` to test the authorization\
#    \ filters."
#  version: "1.0.0"
#  title: "Swagger Petstore"
#  termsOfService: "http://swagger.io/terms/"
#  contact:
#    email: "apiteam@swagger.io"
#  license:
#    name: "Apache 2.0"
#    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
#host: "petstore.swagger.io"
#basePath: "/v2"
#tags:
#  - name: "pet"
#    description: "Everything about your Pets"
#    externalDocs:
#      description: "Find out more about our store"
#      url: "http://swagger.io"
#schemes:
#  - "http"
#
#paths:
#  /pet/findByStatus:
#    get:
#      tags:
#        - "pet"
#      summary: "Finds Pets by status"
#      description: "Multiple status values can be provided with comma separated strings"
#      operationId: "findPetsByStatus"
#      produces:
#        - "application/xml"
#        - "application/json"
#      parameters:
#        - name: "status"
#          in: "query"
#          description: "Status values that need to be considered for filter"
#          required: true
#          type: "array"
#          items:
#            type: "string"
#            enum:
#              - "available"
#              - "pending"
#              - "sold"
#            default: "available"
#          collectionFormat: "csv"
#      responses:
#        200:
#          description: "successful operation"
#          schema:
#            type: "array"
#            items:
#              $ref: "#/definitions/Pet"
#
#definitions:
#  Pet:
#    type: "object"
#    required:
#      - "name"
#      - "photoUrls"
#    properties:
#      id:
#        type: "integer"
#        format: "int64"
#      name:
#        type: "string"
#        example: "doggie"
#      photoUrls:
#        type: "array"
#        xml:
#          name: "photoUrl"
#          wrapped: true
#        items:
#          type: "string"
#      status:
#        type: "string"
#        description: "pet status in the store"
#        enum:
#          - "available"
#          - "pending"
#          - "sold"
#    xml:
#      name: "Pet"